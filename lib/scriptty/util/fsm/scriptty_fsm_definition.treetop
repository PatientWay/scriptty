# Treetop grammar for ScripTTY::Util::FSM::DefinitionParser
# Copyright (C) 2010  Infonium Inc
#
# This file is part of ScripTTY.
#
# ScripTTY is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ScripTTY is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with ScripTTY.  If not, see <http://www.gnu.org/licenses/>.

grammar ScripTTYFSMDefinition
  rule list
    ( mapping_line / EOL )* {
      def rules
        elements.select { |e| e.respond_to? :lhs }
      end
    }
  end

  rule mapping_line
    WS* lhs _cn:( WS* "=>" WS* event_name )? _bl:( WS* "=>" WS* braced_list )? EOL {
      def event_name
        if _cn.nonterminal?
          _cn.elements[3].text_value
        else
          nil
        end
      end
      def sub_list
        if _bl.nonterminal?
          _bl.braced_list.list
        else
          nil
        end
      end
    }
  end

  rule lhs
    string / char / char_class / other
  end

  rule event_name
    [a-z0-9_]+
  end

  rule braced_list
    '{' WS* list WS* '}'
  end

  rule string
    '"' v:( str_unescaped / str_octal / str_hex / str_single )* '"' {
      def value
        v.elements.map{|e| e.to_s}.join
      end
    }
  end

  rule char
    "'" v:( str_unescaped / str_octal / str_hex / str_single ) "'" {
      def value
        v.to_s
      end
    }
  end

  rule char_class
    '[' carat:'^'? cc_char_or_range+ ']' {
      def cc_values
        retval = []
        chars_or_ranges = elements[2].elements
        chars_or_ranges.each do |cr|
          if cr.last_char
            fchar = cr.first_char.to_s.unpack("C*")[0]
            lchar = cr.last_char.to_s.unpack("C*")[0]
            (fchar..lchar).each do |c|
              retval << c.chr
            end
          else
            retval << cr.first_char.to_s
          end
        end
        unless carat.empty?
          # The leading carat is present, so we want all the characters *not* specified.
          retval = (0..255).map{ |c| c.chr } - retval
        end
        retval.uniq
      end
    }
  end

  # A single character or range of characters
  rule cc_char_or_range
    first_char:cc_char r:( '-' last_char:cc_char )? {
      def last_char
        if r.empty?
          nil
        else
          r.last_char
        end
      end
    }
  end

  rule cc_char
    cc_unescaped / str_octal / str_hex / str_single
  end

  rule other
    '*' {
      def value
        :other
      end
    }
  end

  rule cc_unescaped
    [^\\\-\^\[\]\t\r\n] {
      def to_s
        text_value
      end
    }
  end

  rule str_unescaped
    [^"\\\t\r\n] {
      def to_s
        text_value
      end
    }
  end

  rule str_octal
    "\\" [0-7] [0-7] [0-7] {
      def to_s
        text_value[1..-1].to_i(8).chr
      end
    }
  end

  rule str_hex
    "\\" [Xx] [0-9A-Fa-f] [0-9A-Fa-f] {
      def to_s
        text_value[2..-1].to_i(16).chr
      end
    }
  end

  rule str_single
    "\\" [enrt"'\\] {
      def to_s
        case text_value[1..-1]
        when 'e'
          "\e"
        when 'n'
          "\n"
        when 'r'
          "\r"
        when 't'
          "\t"
        when '"'
          '"'
        when "'"
          "'"
        when "\\"
          "\\"
        end
      end
    }
  end

  # whitespace
  rule WS
    [ \t]
  end

  # trailing whitespace (optional), comment (optional), newline
  rule EOL
    WS* ('#' [^\r\n]* )? ( "\n" / "\r\n" )
  end
end
